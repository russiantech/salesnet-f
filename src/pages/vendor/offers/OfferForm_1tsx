// // src/components/offers/OfferForm.tsx
// import React, { useState, useEffect } from 'react';
// import { OffersAxiosService } from '../services/net/OffersAxiosService';
// import { ProductAxiosService } from '../services/net/ProductAxiosService';

// const OfferForm = ({ offer, onSuccess }) => {
//   const [products, setProducts] = useState([]);
//   const [categories, setCategories] = useState([]);
//   const [isLoading, setIsLoading] = useState(true);
//   const [formData, setFormData] = useState({
//     title: '',
//     description: '',
//     discount_type: 'percentage',
//     discount_value: 10,
//     promo_code: '',
//     start_date: new Date(),
//     end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
//     is_featured: false,
//     banner_image: '',
//     background_gradient: '',
//     text_color: '#ffffff',
//     selectedProducts: [],
//     selectedCategories: [],
//   });

//   // Fetch products and categories on mount
//   useEffect(() => {
//     const fetchData = async () => {
//       try {
//         const [productsRes, categoriesRes] = await Promise.all([
//           // OffersAxiosService.fetchProducts({ page_size: 100 }),
//           // OffersAxiosService.fetchCategories()
//           ProductAxiosService.fetchPage(),
//           ProductAxiosService.fetchCategories()
//         ]);
        
//         setProducts(productsRes.data.products);
//         setCategories(categoriesRes.data.categories);
        
//         if (offer) {
//           setFormData(prevData => ({
//             ...prevData,
//             title: offer.title,
//             description: offer.description,
//             discount_type: offer.discount_type,
//             discount_value: offer.discount_value,
//             promo_code: offer.promo_code,
//             start_date: new Date(offer.start_date),
//             end_date: new Date(offer.end_date),
//             is_featured: offer.is_featured,
//             banner_image: offer.banner_image,
//             background_gradient: offer.background_gradient,
//             text_color: offer.text_color,
//             selectedProducts: offer.products.map(p => p.id),
//             selectedCategories: offer.categories.map(c => c.id),
//           }));
//         }
//       } catch (error) {
//         console.error('Error fetching data:', error);
//       } finally {
//         setIsLoading(false);
//       }
//     };
    
//     fetchData();
//   }, [offer]);

//   const handleChange = (e) => {
//     const { name, value, type, checked } = e.target;
//     setFormData(prevData => ({
//       ...prevData,
//       [name]: type === 'checkbox' ? checked : value,
//     }));
//   };

//   const handleMultiSelectChange = (name, selectedOptions) => {
//     setFormData(prevData => ({
//       ...prevData,
//       [name]: selectedOptions.map(option => option.value),
//     }));
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     const offerData = {
//       ...formData,
//       product_ids: formData.selectedProducts,
//       category_ids: formData.selectedCategories,
//     };
    
//     try {
//       const response = offer 
//         ? await OffersAxiosService.updateOffer(offer.id, offerData)
//         : await OffersAxiosService.createOffer(offerData);
      
//       onSuccess(response.data);
//     } catch (error) {
//       console.error('Error saving offer:', error);
//     }
//   };

//   if (isLoading) return <div className="text-center my-5">Loading...</div>;

//   return (
//     <div className="container mt-4">
//       <div className="card shadow">
//         <div className="card-header bg-primary text-white">
//           <h3>{offer ? 'Edit Offer' : 'Create New Offer'}</h3>
//         </div>
//         <div className="card-body">
//           <form onSubmit={handleSubmit}>
//             <div className="row">
//               <div className="col-md-8">
//                 {/* Basic Info */}
//                 <div className="mb-3">
//                   <label className="form-label">Offer Title*</label>
//                   <input 
//                     name="title" 
//                     type="text" 
//                     className="form-control" 
//                     value={formData.title} 
//                     onChange={handleChange} 
//                     placeholder="Summer Sale 2023"
//                     required
//                   />
//                 </div>

//                 <div className="mb-3">
//                   <label className="form-label">Description</label>
//                   <textarea 
//                     name="description" 
//                     className="form-control" 
//                     rows="3" 
//                     value={formData.description} 
//                     onChange={handleChange}
//                   />
//                 </div>

//                 {/* Products Selection */}
//                 <div className="mb-3">
//                   <label className="form-label">Select Products*</label>
//                   <select 
//                     multiple 
//                     className="form-control" 
//                     value={formData.selectedProducts} 
//                     onChange={(e) => handleMultiSelectChange('selectedProducts', Array.from(e.target.selectedOptions))}
//                     required
//                   >
//                     {products.map(product => (
//                       <option key={product.id} value={product.id}>
//                         {`${product.name} ($${product.price})`}
//                       </option>
//                     ))}
//                   </select>
//                 </div>

//                 {/* Categories Selection */}
//                 <div className="mb-3">
//                   <label className="form-label">Select Categories (Optional)</label>
//                   <select 
//                     multiple 
//                     className="form-control" 
//                     value={formData.selectedCategories} 
//                     onChange={(e) => handleMultiSelectChange('selectedCategories', Array.from(e.target.selectedOptions))}
//                   >
//                     {categories.map(category => (
//                       <option key={category.id} value={category.id}>
//                         {category.name}
//                       </option>
//                     ))}
//                   </select>
//                 </div>
//               </div>

//               <div className="col-md-4">
//                 {/* Discount Settings */}
//                 <div className="card mb-3">
//                   <div className="card-header bg-light">
//                     <h5>Discount Settings</h5>
//                   </div>
//                   <div className="card-body">
//                     <div className="mb-3">
//                       <label className="form-label">Discount Type*</label>
//                       <select 
//                         name="discount_type" 
//                         className="form-select" 
//                         value={formData.discount_type} 
//                         onChange={handleChange}
//                       >
//                         <option value="percentage">Percentage</option>
//                         <option value="fixed_amount">Fixed Amount</option>
//                       </select>
//                     </div>

//                     <div className="mb-3">
//                       <label className="form-label">
//                         {formData.discount_type === 'percentage' ? 'Discount Percentage*' : 'Discount Amount*'}
//                       </label>
//                       <div className="input-group">
//                         <input 
//                           name="discount_value" 
//                           type="number" 
//                           className="form-control" 
//                           value={formData.discount_value} 
//                           onChange={handleChange} 
//                           min="0"
//                           step={formData.discount_type === 'percentage' ? '1' : '0.01'}
//                           required
//                         />
//                         <span className="input-group-text">
//                           {formData.discount_type === 'percentage' ? '%' : '$'}
//                         </span>
//                       </div>
//                     </div>

//                     <div className="mb-3">
//                       <label className="form-label">Promo Code (Optional)</label>
//                       <input 
//                         name="promo_code" 
//                         type="text" 
//                         className="form-control" 
//                         value={formData.promo_code} 
//                         onChange={handleChange} 
//                         placeholder="SUMMER2023"
//                       />
//                     </div>
//                   </div>
//                 </div>

//                 {/* Date Settings */}
//                 <div className="card mb-3">
//                   <div className="card-header bg-light">
//                     <h5>Schedule</h5>
//                   </div>
//                   <div className="card-body">
//                     <div className="mb-3">
//                       <label className="form-label">Start Date*</label>
//                       <input 
//                         type="datetime-local" 
//                         name="start_date" 
//                         className="form-control" 
//                         value={formData.start_date.toISOString().slice(0, 16)} 
//                         onChange={handleChange} 
//                         required
//                       />
//                     </div>

//                     <div className="mb-3">
//                       <label className="form-label">End Date*</label>
//                       <input 
//                         type="datetime-local" 
//                         name="end_date" 
//                         className="form-control" 
//                         value={formData.end_date.toISOString().slice(0, 16)} 
//                         onChange={handleChange} 
//                         required
//                       />
//                     </div>

//                     <div className="form-check form-switch mb-3">
//                       <input 
//                         type="checkbox" 
//                         name="is_featured" 
//                         className="form-check-input" 
//                         checked={formData.is_featured} 
//                         onChange={handleChange} 
//                       />
//                       <label className="form-check-label">
//                         Featured Offer
//                       </label>
//                     </div>
//                   </div>
//                 </div>
//               </div>
//             </div>

//             {/* Visual Settings */}
//             <div className="card mb-3">
//               <div className="card-header bg-light">
//                 <h5>Visual Presentation</h5>
//               </div>
//               <div className="card-body">
//                 <div className="row">
//                   <div className="col-md-6 mb-3">
//                     <label className="form-label">Banner Image URL</label>
//                     <input 
//                       name="banner_image" 
//                       type="text" 
//                       className="form-control" 
//                       value={formData.banner_image} 
//                       onChange={handleChange} 
//                       placeholder="https://example.com/banner.jpg"
//                     />
//                   </div>
//                   <div className="col-md-6 mb-3">
//                     <label className="form-label">Background Gradient</label>
//                     <input 
//                       name="background_gradient" 
//                       type="text" 
//                       className="form-control" 
//                       value={formData.background_gradient} 
//                       onChange={handleChange} 
//                       placeholder="linear-gradient(90deg, #ff9966, #ff5e62)"
//                     />
//                   </div>
//                 </div>
//                 <div className="row">
//                   <div className="col-md-6">
//                     <label className="form-label">Text Color</label>
//                     <div className="input-group">
//                       <span className="input-group-text">#</span>
//                       <input 
//                         name="text_color" 
//                         type="text" 
//                         className="form-control" 
//                         value={formData.text_color.replace('#', '')} 
//                         onChange={handleChange} 
//                         maxLength="6"
//                       />
//                       <span 
//                         className="input-group-text color-preview" 
//                         style={{ 
//                           backgroundColor: formData.text_color,
//                           width: '40px'
//                         }}
//                       ></span>
//                     </div>
//                   </div>
//                 </div>
//               </div>
//             </div>

//             <div className="d-flex justify-content-end">
//               <button 
//                 type="submit" 
//                 className="btn btn-primary"
//               >
//                 {offer ? 'Update Offer' : 'Create Offer'}
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default OfferForm;

// 
// src/components/offers/OfferForm.tsx
// import React, { useState, useEffect } from 'react';
// import { OffersAxiosService } from '../services/net/OffersAxiosService';
// import { ProductAxiosService } from '../services/net/ProductAxiosService';

// const OfferForm = ({ offer, onSuccess }) => {
//   const [products, setProducts] = useState([]);
//   const [categories, setCategories] = useState([]);
//   const [filteredProducts, setFilteredProducts] = useState([]);
//   const [filteredCategories, setFilteredCategories] = useState([]);
//   const [isLoading, setIsLoading] = useState(true);
//   const [formData, setFormData] = useState({
//     title: '',
//     description: '',
//     discount_type: 'percentage',
//     discount_value: 10,
//     promo_code: '',
//     start_date: new Date(),
//     end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
//     is_featured: false,
//     banner_image: '',
//     background_gradient: '',
//     text_color: '#ffffff',
//     selectedProducts: [],
//     selectedCategories: [],
//     media: null,
//   });

//   // Fetch products and categories on mount
//   useEffect(() => {
//     const fetchData = async () => {
//       try {
//         const [productsRes, categoriesRes] = await Promise.all([
//           ProductAxiosService.fetchPage(),
//           ProductAxiosService.fetchCategories()
//         ]);
        
//         setProducts(productsRes.data.products);
//         setFilteredProducts(productsRes.data.products);
//         setCategories(categoriesRes.data.categories);
        
//         if (offer) {
//           setFormData(prevData => ({
//             ...prevData,
//             title: offer.title,
//             description: offer.description,
//             discount_type: offer.discount_type,
//             discount_value: offer.discount_value,
//             promo_code: offer.promo_code,
//             start_date: new Date(offer.start_date),
//             end_date: new Date(offer.end_date),
//             is_featured: offer.is_featured,
//             banner_image: offer.banner_image,
//             background_gradient: offer.background_gradient,
//             text_color: offer.text_color,
//             selectedProducts: offer.products.map(p => p.id),
//             selectedCategories: offer.categories.map(c => c.id),
//           }));
//         }
//       } catch (error) {
//         console.error('Error fetching data:', error);
//       } finally {
//         setIsLoading(false);
//       }
//     };
    
//     fetchData();
//   }, [offer]);

//   const handleChange = (e) => {
//     const { name, value, type, checked } = e.target;
//     setFormData(prevData => ({
//       ...prevData,
//       [name]: type === 'checkbox' ? checked : value,
//     }));
//   };

//   const handleMultiSelectChange = (name, selectedOptions) => {
//     setFormData(prevData => ({
//       ...prevData,
//       [name]: selectedOptions.map(option => option.value),
//     }));
//   };

//   const handleSearch = (e, type) => {
//     const query = e.target.value.toLowerCase();
//     if (type === 'products') {
//       setFilteredProducts(products.filter(product => product.name.toLowerCase().includes(query)));
//     } else if (type === 'categories') {
//       setFilteredCategories(categories.filter(category => category.name.toLowerCase().includes(query)));
//     }
//   };

//   const handleFileChange = (e) => {
//     const file = e.target.files[0];
//     if (file) {
//       setFormData(prevData => ({
//         ...prevData,
//         media: file,
//       }));
//     }
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     const offerData = {
//       ...formData,
//       product_ids: formData.selectedProducts,
//       category_ids: formData.selectedCategories,
//     };
    
//     const formDataToSend = new FormData();
//     Object.keys(offerData).forEach(key => {
//       formDataToSend.append(key, offerData[key]);
//     });
    
//     if (formData.media) {
//       formDataToSend.append('media', formData.media);
//     }

//     try {
//       const response = offer 
//         ? await OffersAxiosService.updateOffer(offer.id, formDataToSend)
//         : await OffersAxiosService.createOffer(formDataToSend);
      
//       onSuccess(response.data);
//     } catch (error) {
//       console.error('Error saving offer:', error);
//     }
//   };

//   if (isLoading) return <div className="text-center my-5">Loading...</div>;

//   return (
//     <div className="container mt-4">
//       <div className="card shadow">
//         <div className="card-header bg-primary text-white">
//           <h3>{offer ? 'Edit Offer' : 'Create New Offer'}</h3>
//         </div>
//         <div className="card-body">
//           <form onSubmit={handleSubmit}>
//             <div className="row">
//               <div className="col-md-8">
//                 {/* Basic Info */}
//                 <div className="mb-3">
//                   <label className="form-label">Offer Title*</label>
//                   <input 
//                     name="title" 
//                     type="text" 
//                     className="form-control" 
//                     value={formData.title} 
//                     onChange={handleChange} 
//                     placeholder="Summer Sale 2023"
//                     required
//                   />
//                 </div>

//                 <div className="mb-3">
//                   <label className="form-label">Description</label>
//                   <textarea 
//                     name="description" 
//                     className="form-control" 
//                     rows="3" 
//                     value={formData.description} 
//                     onChange={handleChange}
//                   />
//                 </div>

//                 {/* Products Selection */}
//                 <div className="mb-3">
//                   <label className="form-label">Select Products*</label>
//                   <input 
//                     type="text" 
//                     className="form-control mb-2" 
//                     placeholder="Search products..."
//                     onChange={(e) => handleSearch(e, 'products')}
//                   />
//                   <select 
//                     multiple 
//                     className="form-control" 
//                     value={formData.selectedProducts} 
//                     onChange={(e) => handleMultiSelectChange('selectedProducts', Array.from(e.target.selectedOptions))}
//                     required
//                   >
//                     {filteredProducts.map(product => (
//                       <option key={product.id} value={product.id}>
//                         {`${product.name} ($${product.price})`}
//                       </option>
//                     ))}
//                   </select>
//                 </div>

//                 {/* Categories Selection */}
//                 <div className="mb-3">
//                   <label className="form-label">Select Categories (Optional)</label>
//                   <input 
//                     type="text" 
//                     className="form-control mb-2" 
//                     placeholder="Search categories..."
//                     onChange={(e) => handleSearch(e, 'categories')}
//                   />
//                   <select 
//                     multiple 
//                     className="form-control" 
//                     value={formData.selectedCategories} 
//                     onChange={(e) => handleMultiSelectChange('selectedCategories', Array.from(e.target.selectedOptions))}
//                   >
//                     {filteredCategories.map(category => (
//                       <option key={category.id} value={category.id}>
//                         {category.name}
//                       </option>
//                     ))}
//                   </select>
//                 </div>
//               </div>

//               <div className="col-md-4">
//                 {/* Discount Settings */}
//                 <div className="card mb-3">
//                   <div className="card-header bg-light">
//                     <h5>Discount Settings</h5>
//                   </div>
//                   <div className="card-body">
//                     <div className="mb-3">
//                       <label className="form-label">Discount Type*</label>
//                       <select 
//                         name="discount_type" 
//                         className="form-select" 
//                         value={formData.discount_type} 
//                         onChange={handleChange}
//                       >
//                         <option value="percentage">Percentage</option>
//                         <option value="fixed_amount">Fixed Amount</option>
//                       </select>
//                     </div>

//                     <div className="mb-3">
//                       <label className="form-label">
//                         {formData.discount_type === 'percentage' ? 'Discount Percentage*' : 'Discount Amount*'}
//                       </label>
//                       <div className="input-group">
//                         <input 
//                           name="discount_value" 
//                           type="number" 
//                           className="form-control" 
//                           value={formData.discount_value} 
//                           onChange={handleChange} 
//                           min="0"
//                           step={formData.discount_type === 'percentage' ? '1' : '0.01'}
//                           required
//                         />
//                         <span className="input-group-text">
//                           {formData.discount_type === 'percentage' ? '%' : '$'}
//                         </span>
//                       </div>
//                     </div>

//                     <div className="mb-3">
//                       <label className="form-label">Promo Code (Optional)</label>
//                       <input 
//                         name="promo_code" 
//                         type="text" 
//                         className="form-control" 
//                         value={formData.promo_code} 
//                         onChange={handleChange} 
//                         placeholder="SUMMER2023"
//                       />
//                     </div>
//                   </div>
//                 </div>

//                 {/* Date Settings */}
//                 <div className="card mb-3">
//                   <div className="card-header bg-light">
//                     <h5>Schedule</h5>
//                   </div>
//                   <div className="card-body">
//                     <div className="mb-3">
//                       <label className="form-label">Start Date*</label>
//                       <input 
//                         type="datetime-local" 
//                         name="start_date" 
//                         className="form-control" 
//                         value={formData.start_date.toISOString().slice(0, 16)} 
//                         onChange={handleChange} 
//                         required
//                       />
//                     </div>

//                     <div className="mb-3">
//                       <label className="form-label">End Date*</label>
//                       <input 
//                         type="datetime-local" 
//                         name="end_date" 
//                         className="form-control" 
//                         value={formData.end_date.toISOString().slice(0, 16)} 
//                         onChange={handleChange} 
//                         required
//                       />
//                     </div>

//                     <div className="form-check form-switch mb-3">
//                       <input 
//                         type="checkbox" 
//                         name="is_featured" 
//                         className="form-check-input" 
//                         checked={formData.is_featured} 
//                         onChange={handleChange} 
//                       />
//                       <label className="form-check-label">
//                         Featured Offer
//                       </label>
//                     </div>
//                   </div>
//                 </div>
//               </div>
//             </div>

//             {/* Media Upload */}
//             <div className="mb-3">
//               <label className="form-label">Upload Media (Image/Video)</label>
//               <input 
//                 type="file" 
//                 className="form-control" 
//                 accept="image/*,video/*" 
//                 onChange={handleFileChange} 
//               />
//               {formData.media && (
//                 <div className="mt-2">
//                   <h6>Preview:</h6>
//                   {formData.media.type.startsWith('image/') ? (
//                     <img 
//                       src={URL.createObjectURL(formData.media)} 
//                       alt="Preview" 
//                       style={{ width: '100%', height: 'auto' }} 
//                     />
//                   ) : (
//                     <video 
//                       src={URL.createObjectURL(formData.media)} 
//                       controls 
//                       style={{ width: '100%', height: 'auto' }} 
//                     />
//                   )}
//                 </div>
//               )}
//             </div>

//             {/* Visual Settings */}
//             <div className="card mb-3">
//               <div className="card-header bg-light">
//                 <h5>Visual Presentation</h5>
//               </div>
//               <div className="card-body">
//                 <div className="row">
//                   <div className="col-md-6 mb-3">
//                     <label className="form-label">Banner Image URL</label>
//                     <input 
//                       name="banner_image" 
//                       type="text" 
//                       className="form-control" 
//                       value={formData.banner_image} 
//                       onChange={handleChange} 
//                       placeholder="https://example.com/banner.jpg"
//                     />
//                   </div>
//                   <div className="col-md-6 mb-3">
//                     <label className="form-label">Background Gradient</label>
//                     <input 
//                       name="background_gradient" 
//                       type="text" 
//                       className="form-control" 
//                       value={formData.background_gradient} 
//                       onChange={handleChange} 
//                       placeholder="linear-gradient(90deg, #ff9966, #ff5e62)"
//                     />
//                   </div>
//                 </div>
//                 <div className="row">
//                   <div className="col-md-6">
//                     <label className="form-label">Text Color</label>
//                     <div className="input-group">
//                       <span className="input-group-text">#</span>
//                       <input 
//                         name="text_color" 
//                         type="text" 
//                         className="form-control" 
//                         value={formData.text_color.replace('#', '')} 
//                         onChange={handleChange} 
//                         maxLength="6"
//                       />
//                       <span 
//                         className="input-group-text color-preview" 
//                         style={{ 
//                           backgroundColor: formData.text_color,
//                           width: '40px'
//                         }}
//                       ></span>
//                     </div>
//                   </div>
//                 </div>
//               </div>
//             </div>

//             <div className="d-flex justify-content-end">
//               <button 
//                 type="submit" 
//                 className="btn btn-primary"
//               >
//                 {offer ? 'Update Offer' : 'Create Offer'}
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default OfferForm;

// 
// src/components/offers/OfferForm.tsx
// import React, { useState, useEffect } from 'react';
// import { OffersAxiosService } from '../services/net/OffersAxiosService';
// import { ProductAxiosService } from '../services/net/ProductAxiosService';

const OfferForm_MAIN = ({ offer, onSuccess }) => {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [filteredCategories, setFilteredCategories] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    discount_type: 'percentage',
    discount_value: 10,
    promo_code: '',
    start_date: new Date(),
    end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
    is_featured: false,
    banner_image: '',
    background_gradient: '',
    text_color: '#ffffff',
    selectedProducts: [],
    selectedCategories: [],
    media: null,
  });

  // Fetch products and categories on mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [productsRes, categoriesRes] = await Promise.all([
          ProductAxiosService.fetchPage(),
          ProductAxiosService.fetchCategories()
        ]);
        
        setProducts(productsRes.data.products);
        setFilteredProducts(productsRes.data.products);
        setCategories(categoriesRes.data.categories);
        
        if (offer) {
          setFormData(prevData => ({
            ...prevData,
            title: offer.title,
            description: offer.description,
            discount_type: offer.discount_type,
            discount_value: offer.discount_value,
            promo_code: offer.promo_code,
            start_date: new Date(offer.start_date),
            end_date: new Date(offer.end_date),
            is_featured: offer.is_featured,
            banner_image: offer.banner_image,
            background_gradient: offer.background_gradient,
            text_color: offer.text_color,
            selectedProducts: offer.products.map(p => p.id),
            selectedCategories: offer.categories.map(c => c.id),
          }));
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchData();
  }, [offer]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleMultiSelectChange = (name, selectedOptions) => {
    setFormData(prevData => ({
      ...prevData,
      [name]: selectedOptions.map(option => option.value),
    }));
  };

  const handleSearch = (e, type) => {
    const query = e.target.value.toLowerCase();
    if (type === 'products') {
      setFilteredProducts(products.filter(product => product.name.toLowerCase().includes(query)));
    } else if (type === 'categories') {
      setFilteredCategories(categories.filter(category => category.name.toLowerCase().includes(query)));
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData(prevData => ({
        ...prevData,
        media: file,
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const offerData = {
      ...formData,
      product_ids: formData.selectedProducts,
      category_ids: formData.selectedCategories,
    };
    
    const formDataToSend = new FormData();
    Object.keys(offerData).forEach(key => {
      formDataToSend.append(key, offerData[key]);
    });
    
    if (formData.media) {
      formDataToSend.append('media', formData.media);
    }

    try {
      const response = offer 
        ? await OffersAxiosService.updateOffer(offer.id, formDataToSend)
        : await OffersAxiosService.createOffer(formDataToSend);
      
      onSuccess(response.data);
    } catch (error) {
      console.error('Error saving offer:', error);
    }
  };

  if (isLoading) return <div className="text-center my-5">Loading...</div>;

  return (
    <div className="container mt-4">
      <div className="card shadow">
        <div className="card-header bg-primary text-white">
          <h3>{offer ? 'Edit Offer' : 'Create New Offer'}</h3>
        </div>
        <div className="card-body">
          <form onSubmit={handleSubmit}>
            <div className="row">
              <div className="col-md-8">
                {/* Basic Info */}
                <div className="mb-3">
                  <label className="form-label">Offer Title*</label>
                  <input 
                    name="title" 
                    type="text" 
                    className="form-control" 
                    value={formData.title} 
                    onChange={handleChange} 
                    placeholder="Summer Sale 2023"
                    required
                  />
                </div>

                <div className="mb-3">
                  <label className="form-label">Description</label>
                  <textarea 
                    name="description" 
                    className="form-control" 
                    rows="3" 
                    value={formData.description} 
                    onChange={handleChange}
                  />
                </div>

                {/* Products Selection */}
                <div className="mb-3">
                  <label className="form-label">Select Products*</label>
                  <input 
                    type="text" 
                    className="form-control mb-2" 
                    placeholder="Search products..."
                    onChange={(e) => handleSearch(e, 'products')}
                  />
                  <div className="position-relative">
                    <div className="form-control" style={{ cursor: 'pointer', minHeight: '38px' }}>
                      <div className="d-flex flex-wrap gap-1">
                        {formData.selectedProducts.length === 0 ? (
                          <span className="text-muted">Select products...</span>
                        ) : (
                          formData.selectedProducts.map(id => {
                            const product = products.find(p => p.id === id);
                            return <span key={id} className="badge bg-primary me-1">{product.name}</span>;
                          })
                        )}
                      </div>
                    </div>
                    <div className="card position-absolute w-100 mt-1 shadow" style={{ zIndex: 1000 }}>
                      <div className="card-body p-2">
                        <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
                          <ul className="list-unstyled" style={{ paddingLeft: 0 }}>
                            {filteredProducts.map(product => (
                              <li key={product.id} className="mb-1">
                                <div className="form-check">
                                  <input 
                                    className="form-check-input" 
                                    id={`prod-${product.id}`} 
                                    type="checkbox" 
                                    checked={formData.selectedProducts.includes(product.id)} 
                                    onChange={(e) => {
                                      const selectedOptions = e.target.checked 
                                        ? [...formData.selectedProducts, product.id] 
                                        : formData.selectedProducts.filter(id => id !== product.id);
                                      handleMultiSelectChange('selectedProducts', selectedOptions);
                                    }}
                                  />
                                  <label className="form-check-label" htmlFor={`prod-${product.id}`} style={{ cursor: 'pointer' }}>
                                    {`${product.name} ($${product.price})`}
                                  </label>
                                </div>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Categories Selection */}
                <div className="mb-3">
                  <label className="form-label">Select Categories*</label>
                  <input 
                    type="text" 
                    className="form-control mb-2" 
                    placeholder="Search categories..."
                    onChange={(e) => handleSearch(e, 'categories')}
                  />
                  <div className="position-relative">
                    <div className="form-control" style={{ cursor: 'pointer', minHeight: '38px' }}>
                      <div className="d-flex flex-wrap gap-1">
                        {formData.selectedCategories.length === 0 ? (
                          <span className="text-muted">Select categories...</span>
                        ) : (
                          formData.selectedCategories.map(id => {
                            const category = categories.find(c => c.id === id);
                            return <span key={id} className="badge bg-primary me-1">{category.name}</span>;
                          })
                        )}
                      </div>
                    </div>
                    <div className="card position-absolute w-100 mt-1 shadow" style={{ zIndex: 1000 }}>
                      <div className="card-body p-2">
                        <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
                          <ul className="list-unstyled" style={{ paddingLeft: 0 }}>
                            {filteredCategories.map(category => (
                              <li key={category.id} className="mb-1">
                                <div className="form-check">
                                  <input 
                                    className="form-check-input" 
                                    id={`cat-${category.id}`} 
                                    type="checkbox" 
                                    checked={formData.selectedCategories.includes(category.id)} 
                                    onChange={(e) => {
                                      const selectedOptions = e.target.checked 
                                        ? [...formData.selectedCategories, category.id] 
                                        : formData.selectedCategories.filter(id => id !== category.id);
                                      handleMultiSelectChange('selectedCategories', selectedOptions);
                                    }}
                                  />
                                  <label className="form-check-label" htmlFor={`cat-${category.id}`} style={{ cursor: 'pointer' }}>
                                    {category.name}
                                  </label>
                                </div>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="col-md-4">
                {/* Discount Settings */}
                <div className="card mb-3">
                  <div className="card-header bg-light">
                    <h5>Discount Settings</h5>
                  </div>
                  <div className="card-body">
                    <div className="mb-3">
                      <label className="form-label">Discount Type*</label>
                      <select 
                        name="discount_type" 
                        className="form-select" 
                        value={formData.discount_type} 
                        onChange={handleChange}
                      >
                        <option value="percentage">Percentage</option>
                        <option value="fixed_amount">Fixed Amount</option>
                      </select>
                    </div>

                    <div className="mb-3">
                      <label className="form-label">
                        {formData.discount_type === 'percentage' ? 'Discount Percentage*' : 'Discount Amount*'}
                      </label>
                      <div className="input-group">
                        <input 
                          name="discount_value" 
                          type="number" 
                          className="form-control" 
                          value={formData.discount_value} 
                          onChange={handleChange} 
                          min="0"
                          step={formData.discount_type === 'percentage' ? '1' : '0.01'}
                          required
                        />
                        <span className="input-group-text">
                          {formData.discount_type === 'percentage' ? '%' : '$'}
                        </span>
                      </div>
                    </div>

                    <div className="mb-3">
                      <label className="form-label">Promo Code (Optional)</label>
                      <input 
                        name="promo_code" 
                        type="text" 
                        className="form-control" 
                        value={formData.promo_code} 
                        onChange={handleChange} 
                        placeholder="SUMMER2023"
                      />
                    </div>
                  </div>
                </div>

                {/* Date Settings */}
                <div className="card mb-3">
                  <div className="card-header bg-light">
                    <h5>Schedule</h5>
                  </div>
                  <div className="card-body">
                    <div className="mb-3">
                      <label className="form-label">Start Date*</label>
                      <input 
                        type="datetime-local" 
                        name="start_date" 
                        className="form-control" 
                        value={formData.start_date.toISOString().slice(0, 16)} 
                        onChange={handleChange} 
                        required
                      />
                    </div>

                    <div className="mb-3">
                      <label className="form-label">End Date*</label>
                      <input 
                        type="datetime-local" 
                        name="end_date" 
                        className="form-control" 
                        value={formData.end_date.toISOString().slice(0, 16)} 
                        onChange={handleChange} 
                        required
                      />
                    </div>

                    <div className="form-check form-switch mb-3">
                      <input 
                        type="checkbox" 
                        name="is_featured" 
                        className="form-check-input" 
                        checked={formData.is_featured} 
                        onChange={handleChange} 
                      />
                      <label className="form-check-label">
                        Featured Offer
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Media Upload */}
            <div className="mb-3">
              <label className="form-label">Upload Media (Image/Video)</label>
              <input 
                type="file" 
                className="form-control" 
                accept="image/*,video/*" 
                onChange={handleFileChange} 
              />
              {formData.media && (
                <div className="mt-2">
                  <h6>Preview:</h6>
                  {formData.media.type.startsWith('image/') ? (
                    <img 
                      src={URL.createObjectURL(formData.media)} 
                      alt="Preview" 
                      style={{ width: '100%', height: 'auto' }} 
                    />
                  ) : (
                    <video 
                      src={URL.createObjectURL(formData.media)} 
                      controls 
                      style={{ width: '100%', height: 'auto' }} 
                    />
                  )}
                </div>
              )}
            </div>

            {/* Visual Settings */}
            <div className="card mb-3">
              <div className="card-header bg-light">
                <h5>Visual Presentation</h5>
              </div>
              <div className="card-body">
                <div className="row">
                  <div className="col-md-6 mb-3">
                    <label className="form-label">Banner Image URL</label>
                    <input 
                      name="banner_image" 
                      type="text" 
                      className="form-control" 
                      value={formData.banner_image} 
                      onChange={handleChange} 
                      placeholder="https://example.com/banner.jpg"
                    />
                  </div>
                  <div className="col-md-6 mb-3">
                    <label className="form-label">Background Gradient</label>
                    <input 
                      name="background_gradient" 
                      type="text" 
                      className="form-control" 
                      value={formData.background_gradient} 
                      onChange={handleChange} 
                      placeholder="linear-gradient(90deg, #ff9966, #ff5e62)"
                    />
                  </div>
                </div>
                <div className="row">
                  <div className="col-md-6">
                    <label className="form-label">Text Color</label>
                    <div className="input-group">
                      <span className="input-group-text">#</span>
                      <input 
                        name="text_color" 
                        type="text" 
                        className="form-control" 
                        value={formData.text_color.replace('#', '')} 
                        onChange={handleChange} 
                        maxLength="6"
                      />
                      <span 
                        className="input-group-text color-preview" 
                        style={{ 
                          backgroundColor: formData.text_color,
                          width: '40px'
                        }}
                      ></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex justify-content-end">
              <button 
                type="submit" 
                className="btn btn-primary"
              >
                {offer ? 'Update Offer' : 'Create Offer'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

// 
import React, { useState, useEffect, useRef } from 'react';
import { OffersAxiosService } from '../../../services/net/OffersAxiosService';
import { ProductAxiosService } from '../../../services/net/ProductAxiosService';

const OfferForm = ({ offer, onSuccess }) => {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [filteredCategories, setFilteredCategories] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    discount_type: 'percentage',
    discount_value: 10,
    promo_code: '',
    start_date: new Date(),
    end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
    is_featured: false,
    banner_image: '',
    background_gradient: '',
    text_color: '#ffffff',
    selectedProducts: [],
    selectedCategories: [],
    media: {
      files: [],
      video_link: ''
    },
  });
  const [previews, setPreviews] = useState([]);
  const fileInputRef = useRef(null);

  // Fetch products and categories on mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [productsRes, categoriesRes] = await Promise.all([
          ProductAxiosService.fetchPage(),
          ProductAxiosService.fetchCategories()
        ]);
        
        setProducts(productsRes.data.products);
        setFilteredProducts(productsRes.data.products);
        setCategories(categoriesRes.data.categories);
        setFilteredCategories(categoriesRes.data.categories);
        
        if (offer) {
          setFormData(prevData => ({
            ...prevData,
            title: offer.title,
            description: offer.description,
            discount_type: offer.discount_type,
            discount_value: offer.discount_value,
            promo_code: offer.promo_code,
            start_date: new Date(offer.start_date),
            end_date: new Date(offer.end_date),
            is_featured: offer.is_featured,
            banner_image: offer.banner_image,
            background_gradient: offer.background_gradient,
            text_color: offer.text_color,
            selectedProducts: offer.products.map(p => p.id),
            selectedCategories: offer.categories.map(c => c.id),
            media: {
              files: offer.media_files || [],
              video_link: offer.video_link || ''
            }
          }));

          // Set previews for existing media
          if (offer.media_files && offer.media_files.length > 0) {
            setPreviews(offer.media_files.map(file => ({
              url: file.url,
              name: file.name,
              size: file.size,
              type: file.type.startsWith('image') ? 'image' : 'video'
            })));
          }
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchData();
  }, [offer]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleMediaInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      media: {
        ...prevData.media,
        [name]: value
      }
    }));
  };

  const handleProductToggle = (productId) => {
    setFormData(prevData => {
      const newSelected = prevData.selectedProducts.includes(productId)
        ? prevData.selectedProducts.filter(id => id !== productId)
        : [...prevData.selectedProducts, productId];
      return {
        ...prevData,
        selectedProducts: newSelected
      };
    });
  };

  const handleCategoryToggle = (categoryId) => {
    setFormData(prevData => {
      const newSelected = prevData.selectedCategories.includes(categoryId)
        ? prevData.selectedCategories.filter(id => id !== categoryId)
        : [...prevData.selectedCategories, categoryId];
      return {
        ...prevData,
        selectedCategories: newSelected
      };
    });
  };

  const handleSearch = (e, type) => {
    const query = e.target.value.toLowerCase();
    if (type === 'products') {
      setFilteredProducts(products.filter(product => 
        product.name.toLowerCase().includes(query)
      ));
    } else if (type === 'categories') {
      setFilteredCategories(categories.filter(category => 
        category.name.toLowerCase().includes(query)
      ));
    }
  };

  const handleFileChange = async (e) => {
    const files = Array.from(e.target.files);
    if (files.length === 0) return;

    const newPreviews = await Promise.all(files.map(file => {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          resolve({
            url: e.target.result,
            name: file.name,
            size: file.size,
            type: file.type.startsWith('image') ? 'image' : 'video'
          });
        };
        reader.readAsDataURL(file);
      });
    }));

    setPreviews(prev => [...prev, ...newPreviews]);
    setFormData(prev => ({
      ...prev,
      media: {
        ...prev.media,
        files: [...prev.media.files, ...files]
      }
    }));
  };

  const removeMedia = (index) => {
    setPreviews(prev => prev.filter((_, i) => i !== index));
    setFormData(prev => ({
      ...prev,
      media: {
        ...prev.media,
        files: prev.media.files.filter((_, i) => i !== index)
      }
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const offerData = {
      ...formData,
      product_ids: formData.selectedProducts,
      category_ids: formData.selectedCategories,
      start_date: formData.start_date.toISOString(),
      end_date: formData.end_date.toISOString(),
    };
    
    const formDataToSend = new FormData();
    Object.keys(offerData).forEach(key => {
      if (key !== 'media') {
        formDataToSend.append(key, offerData[key]);
      }
    });

    // Append media files
    formData.media.files.forEach(file => {
      formDataToSend.append('media_files[]', file);
    });

    // Append video link if exists
    if (formData.media.video_link) {
      formDataToSend.append('video_link', formData.media.video_link);
    }

    try {
      const response = offer 
        ? await OffersAxiosService.updateOffer(offer.id, formDataToSend)
        : await OffersAxiosService.createOffer(formDataToSend);
      
      onSuccess(response.data);
    } catch (error) {
      console.error('Error saving offer:', error);
    }
  };

  if (isLoading) return <div className="text-center my-5">Loading...</div>;

  return (
    <div className="container mt-4">
      <div className="card shadow">
        <div className="card-header bg-tertiary text-white">
          <h3>{offer ? 'Edit Offer' : 'Create New Offer'}</h3>
        </div>
        <div className="card-body">
          <form onSubmit={handleSubmit}>
            <div className="row">
              <div className="col-md-8">
                {/* Basic Info */}
                <div className="mb-3">
                  <label className="form-label">Offer Title*</label>
                  <input 
                    name="title" 
                    type="text" 
                    className="form-control" 
                    value={formData.title} 
                    onChange={handleChange} 
                    placeholder="Summer Sale 2023"
                    required
                  />
                </div>

                <div className="mb-3">
                  <label className="form-label">Description</label>
                  <textarea 
                    name="description" 
                    className="form-control" 
                    rows="3" 
                    value={formData.description} 
                    onChange={handleChange}
                  />
                </div>

                {/* Products Selection */}
                <div className="mb-3">
                  <label className="form-label">Select Products*</label>
                  <div className="dropdown">
                    <input 
                      type="text" 
                      className="form-control mb-2" 
                      placeholder="Search products..."
                      data-bs-toggle="dropdown"
                      aria-expanded="false"
                      onChange={(e) => handleSearch(e, 'products')}
                    />
                    <div className="dropdown-menu w-100">
                      <ul className="list-unstyled" style={{ maxHeight: '200px', overflowY: 'auto' }}>
                        {filteredProducts.map(product => (
                          <li key={product.id} className="dropdown-item">
                            <div className="form-check">
                              <input 
                                className="form-check-input" 
                                id={`prod-${product.id}`} 
                                type="checkbox" 
                                checked={formData.selectedProducts.includes(product.id)} 
                                onChange={() => handleProductToggle(product.id)}
                              />
                              <label className="form-check-label" htmlFor={`prod-${product.id}`}>
                                {`${product.name} ($${product.price})`}
                              </label>
                            </div>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                  {formData.selectedProducts.length > 0 && (
                    <div className="mt-2">
                      <h6>Selected Products:</h6>
                      <div className="d-flex flex-wrap gap-2">
                        {formData.selectedProducts.map(prodId => {
                          const product = products.find(p => p.id === prodId);
                          return product ? (
                            <span key={prodId} className="badge bg-primary">
                              {product.name}
                            </span>
                          ) : null;
                        })}
                      </div>
                    </div>
                  )}
                </div>

                {/* Categories Selection */}
                <div className="mb-3">
                  <label className="form-label">Select Categories*</label>
                  <div className="dropdown">
                    <input 
                      type="text" 
                      className="form-control mb-2" 
                      placeholder="Search categories..."
                      data-bs-toggle="dropdown"
                      aria-expanded="false"
                      onChange={(e) => handleSearch(e, 'categories')}
                    />
                    <div className="dropdown-menu w-100">
                      <ul className="list-unstyled" style={{ maxHeight: '200px', overflowY: 'auto' }}>
                        {filteredCategories.map(category => (
                          <li key={category.id} className="dropdown-item">
                            <div className="form-check">
                              <input 
                                className="form-check-input" 
                                id={`cat-${category.id}`} 
                                type="checkbox" 
                                checked={formData.selectedCategories.includes(category.id)} 
                                onChange={() => handleCategoryToggle(category.id)}
                              />
                              <label className="form-check-label" htmlFor={`cat-${category.id}`}>
                                {category.name}
                              </label>
                            </div>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                  {formData.selectedCategories.length > 0 && (
                    <div className="mt-2">
                      <h6>Selected Categories:</h6>
                      <div className="d-flex flex-wrap gap-2">
                        {formData.selectedCategories.map(catId => {
                          const category = categories.find(c => c.id === catId);
                          return category ? (
                            <span key={catId} className="badge bg-secondary">
                              {category.name}
                            </span>
                          ) : null;
                        })}
                      </div>
                    </div>
                  )}
                </div>

                {/* Media Upload Section */}
                <section className="position-relative bg-body rounded p-2 m-2">
                  <div className="position-relative z-1 p-2 m-2">
                    <div className="d-sm-flex align-items-center justify-content-between mb-3 mb-sm-4">
                      <h2 className="h4 mb-2 mb-sm-0 me-3">Photos & Videos</h2>
                      <div className="position-relative d-flex">
                        <i className="fi-info text-info mt-1 me-2" />
                      </div>
                    </div>
                    <small className="fs-sm text-warning mb-3">
                      The maximum file size is 8 MB. Formats: jpeg, jpg, png, mp4, mov. Put the main picture first.
                      {previews.length === 0 && (<>At least one image is required for your listing</>)}
                    </small>
                    <div style={{ maxWidth: '852px' }}>
                      <div className="row row-cols-2 row-cols-sm-3 g-2 g-md-4 g-lg-3 g-xl-4">
                        {/* Media previews */}
                        {previews.map((preview, index) => (
                          <div className="col" key={index}>
                            <div className="hover-effect-opacity position-relative overflow-hidden rounded">
                              {index === 0 && (
                                <span className="badge text-bg-light position-absolute top-0 start-0 z-3 mt-2 ms-2">Cover</span>
                              )}
                              <div className="ratio" style={{ aspectRatio: '4/3' }}>
                                {preview.type === 'image' ? (
                                  <img src={preview.url} alt={`Preview ${index + 1}`} className="img-fluid object-fit-cover" />
                                ) : (
                                  <video controls className="w-100 h-100 object-fit-cover">
                                    <source src={preview.url} type={formData.media.files[index].type} />
                                  </video>
                                )}
                              </div>
                              <div className="hover-effect-target position-absolute top-0 start-0 d-flex align-items-center justify-content-center w-100 h-100 opacity-0">
                                <button
                                  type="button"
                                  className="btn btn-icon btn-sm btn-light position-relative z-2"
                                  aria-label="Remove"
                                  onClick={() => removeMedia(index)}
                                >
                                  <i className="ci-trash-empty"></i>
                                </button>
                                <span className="position-absolute top-0 start-0 w-100 h-100 bg-black bg-opacity-25 z-1" />
                              </div>
                            </div>
                            <small className="text-muted d-block text-truncate mt-1">
                              {preview.name} ({Math.round(preview.size / 1024)} KB)
                            </small>
                          </div>
                        ))}

                        {/* Upload button */}
                        <div className="col">
                          <div
                            className="d-flex align-items-center justify-content-center position-relative h-100 cursor-pointer bg-body-tertiary border border-2 border-dotted rounded p-3"
                            onClick={() => fileInputRef.current.click()}
                            style={{ minHeight: '150px' }}
                          >
                            <div className="text-center">
                              <i className="fi-plus-circle fs-4 text-secondary-emphasis mb-2" />
                              <div className="hover-effect-underline stretched-link fs-sm fw-medium">
                                Upload photos/videos
                              </div>
                              <input
                                type="file"
                                ref={fileInputRef}
                                onChange={handleFileChange}
                                className="d-none"
                                multiple
                                accept="image/*,video/*"
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div className="pt-3 mt-2 mt-md-3">
                      <label htmlFor="video_link" className="form-label">Link to YouTube/Vimeo video (optional)</label>
                      <div className="position-relative">
                        <i className="fi-link position-absolute top-50 start-0 translate-middle-y fs-lg ms-3" />
                        <input
                          type="url"
                          className="form-control form-control-lg form-icon-start"
                          id="video_link"
                          name="video_link"
                          placeholder="www.youtube.com/..."
                          value={formData.media.video_link}
                          onChange={handleMediaInputChange}
                        />
                      </div>
                    </div>
                  </div>
                </section>
              </div>

              <div className="col-md-4">
                {/* Discount Settings */}
                <div className="card mb-3">
                  <div className="card-header bg-light">
                    <h5>Discount Settings</h5>
                  </div>
                  <div className="card-body">
                    <div className="mb-3">
                      <label className="form-label">Discount Type*</label>
                      <select 
                        name="discount_type" 
                        className="form-select" 
                        value={formData.discount_type} 
                        onChange={handleChange}
                      >
                        <option value="percentage">Percentage</option>
                        <option value="fixed_amount">Fixed Amount</option>
                      </select>
                    </div>

                    <div className="mb-3">
                      <label className="form-label">
                        {formData.discount_type === 'percentage' ? 'Discount Percentage*' : 'Discount Amount*'}
                      </label>
                      <div className="input-group">
                        <input 
                          name="discount_value" 
                          type="number" 
                          className="form-control" 
                          value={formData.discount_value} 
                          onChange={handleChange} 
                          min="0"
                          step={formData.discount_type === 'percentage' ? '1' : '0.01'}
                          required
                        />
                        <span className="input-group-text">
                          {formData.discount_type === 'percentage' ? '%' : '$'}
                        </span>
                      </div>
                    </div>

                    <div className="mb-3">
                      <label className="form-label">Promo Code (Optional)</label>
                      <input 
                        name="promo_code" 
                        type="text" 
                        className="form-control" 
                        value={formData.promo_code} 
                        onChange={handleChange} 
                        placeholder="SUMMER2023"
                      />
                    </div>
                  </div>
                </div>

                {/* Date Settings */}
                <div className="card mb-3">
                  <div className="card-header bg-light">
                    <h5>Schedule</h5>
                  </div>
                  <div className="card-body">
                    <div className="mb-3">
                      <label className="form-label">Start Date*</label>
                      <input 
                        type="datetime-local" 
                        name="start_date" 
                        className="form-control" 
                        value={formData.start_date.toISOString().slice(0, 16)} 
                        onChange={handleChange} 
                        required
                      />
                    </div>

                    <div className="mb-3">
                      <label className="form-label">End Date*</label>
                      <input 
                        type="datetime-local" 
                        name="end_date" 
                        className="form-control" 
                        value={formData.end_date.toISOString().slice(0, 16)} 
                        onChange={handleChange} 
                        required
                      />
                    </div>

                    <div className="form-check form-switch mb-3">
                      <input 
                        type="checkbox" 
                        name="is_featured" 
                        className="form-check-input" 
                        checked={formData.is_featured} 
                        onChange={handleChange} 
                      />
                      <label className="form-check-label">
                        Featured Offer
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Visual Settings */}
            <div className="card mb-3">
              <div className="card-header bg-light">
                <h5>Visual Presentation</h5>
              </div>
              <div className="card-body">
                <div className="row">
                  <div className="col-md-6 mb-3">
                    <label className="form-label">Banner Image URL</label>
                    <input 
                      name="banner_image" 
                      type="text" 
                      className="form-control" 
                      value={formData.banner_image} 
                      onChange={handleChange} 
                      placeholder="https://example.com/banner.jpg"
                    />
                  </div>
                  <div className="col-md-6 mb-3">
                    <label className="form-label">Background Gradient</label>
                    <input 
                      name="background_gradient" 
                      type="text" 
                      className="form-control" 
                      value={formData.background_gradient} 
                      onChange={handleChange} 
                      placeholder="linear-gradient(90deg, #ff9966, #ff5e62)"
                    />
                  </div>
                </div>
                <div className="row">
                  <div className="col-md-6">
                    <label className="form-label">Text Color</label>
                    <div className="input-group">
                      <span className="input-group-text">#</span>
                      <input 
                        name="text_color" 
                        type="text" 
                        className="form-control" 
                        value={formData.text_color.replace('#', '')} 
                        onChange={handleChange} 
                        maxLength="6"
                      />
                      <span 
                        className="input-group-text color-preview" 
                        style={{ 
                          backgroundColor: formData.text_color,
                          width: '40px'
                        }}
                      ></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex justify-content-end">
              <button 
                type="submit" 
                className="btn btn-primary"
              >
                {offer ? 'Update Offer' : 'Create Offer'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

// export default OfferForm;

// src/components/offers/OfferForm.tsx
import React, { useState, useEffect, useRef } from 'react';
import { OffersAxiosService } from '../../../services/net/OffersAxiosService';
import { ProductAxiosService } from '../../../services/net/ProductAxiosService';

const OfferForm2 = ({ offer, onSuccess }) => {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [mediaFiles, setMediaFiles] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    discount_type: 'percentage',
    discount_value: 10,
    promo_code: '',
    start_date: new Date(),
    end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
    is_featured: false,
    selectedProduct: '',
    selectedCategory: '',
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [productsRes, categoriesRes] = await Promise.all([
          ProductAxiosService.fetchPage(),
          ProductAxiosService.fetchCategories()
        ]);
        
        setProducts(productsRes.data.products);
        setCategories(categoriesRes.data.categories);
        
        if (offer) {
          setFormData(prevData => ({
            ...prevData,
            title: offer.title,
            description: offer.description,
            discount_type: offer.discount_type,
            discount_value: offer.discount_value,
            promo_code: offer.promo_code,
            start_date: new Date(offer.start_date),
            end_date: new Date(offer.end_date),
            is_featured: offer.is_featured,
            selectedProduct: offer.products[0]?.id || '',
            selectedCategory: offer.categories[0]?.id || '',
          }));
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchData();
  }, [offer]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    setMediaFiles(prevFiles => [...prevFiles, ...files]);
  };

  const handleRemoveFile = (index) => {
    setMediaFiles(prevFiles => prevFiles.filter((_, i) => i !== index));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const offerData = {
      ...formData,
      media_files: mediaFiles,
    };
    
    try {
      const response = offer 
        ? await OffersAxiosService.updateOffer(offer.id, offerData)
        : await OffersAxiosService.createOffer(offerData);
      
      onSuccess(response.data);
    } catch (error) {
      console.error('Error saving offer:', error);
    }
  };

  if (isLoading) return <div className="text-center my-5">Loading...</div>;

  return (
    <div className="container mt-4">
      <div className="card shadow">
        <div className="card-header bg-primary text-white">
          <h3>{offer ? 'Edit Offer' : 'Create New Offer'}</h3>
        </div>
        <div className="card-body">
          <form onSubmit={handleSubmit} onClick={(e) => e.stopPropagation()}>
            <div className="row">
              <div className="col-md-8">
                {/* Basic Info */}
                <div className="mb-3">
                  <label className="form-label">Offer Title*</label>
                  <input 
                    name="title" 
                    type="text" 
                    className="form-control" 
                    value={formData.title} 
                    onChange={handleChange} 
                    placeholder="Summer Sale 2023"
                    required
                  />
                </div>

                <div className="mb-3">
                  <label className="form-label">Description</label>
                  <textarea 
                    name="description" 
                    className="form-control" 
                    rows="3" 
                    value={formData.description} 
                    onChange={handleChange}
                  />
                </div>

                {/* Product Selection */}
                <div className="mb-3">
                  <label className="form-label">Select Product*</label>
                  <select 
                    name="selectedProduct" 
                    className="form-select" 
                    value={formData.selectedProduct} 
                    onChange={handleChange}
                    required
                  >
                    <option value="" disabled>Select a product</option>
                    {products.map(product => (
                      <option key={product.id} value={product.id}>
                        {`${product.name} ($${product.price})`}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Category Selection */}
                <div className="mb-3">
                  <label className="form-label">Select Category (Optional)</label>
                  <select 
                    name="selectedCategory" 
                    className="form-select" 
                    value={formData.selectedCategory} 
                    onChange={handleChange}
                  >
                    <option value="" disabled>Select a category</option>
                    {categories.map(category => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="col-md-4">
                {/* Discount Settings */}
                <div className="card mb-3">
                  <div className="card-header bg-light">
                    <h5>Discount Settings</h5>
                  </div>
                  <div className="card-body">
                    <div className="mb-3">
                      <label className="form-label">Discount Type*</label>
                      <select 
                        name="discount_type" 
                        className="form-select" 
                        value={formData.discount_type} 
                        onChange={handleChange}
                      >
                        <option value="percentage">Percentage</option>
                        <option value="fixed_amount">Fixed Amount</option>
                      </select>
                    </div>

                    <div className="mb-3">
                      <label className="form-label">
                        {formData.discount_type === 'percentage' ? 'Discount Percentage*' : 'Discount Amount*'}
                      </label>
                      <div className="input-group">
                        <input 
                          name="discount_value" 
                          type="number" 
                          className="form-control" 
                          value={formData.discount_value} 
                          onChange={handleChange} 
                          min="0"
                          step={formData.discount_type === 'percentage' ? '1' : '0.01'}
                          required
                        />
                        <span className="input-group-text">
                          {formData.discount_type === 'percentage' ? '%' : '$'}
                        </span>
                      </div>
                    </div>

                    <div className="mb-3">
                      <label className="form-label">Promo Code (Optional)</label>
                      <input 
                        name="promo_code" 
                        type="text" 
                        className="form-control" 
                        value={formData.promo_code} 
                        onChange={handleChange} 
                        placeholder="SUMMER2023"
                      />
                    </div>
                  </div>
                </div>

                {/* Date Settings */}
                <div className="card mb-3">
                  <div className="card-header bg-light">
                    <h5>Schedule</h5>
                  </div>
                  <div className="card-body">
                    <div className="mb-3">
                      <label className="form-label">Start Date*</label>
                      <input 
                        type="datetime-local" 
                        name="start_date" 
                        className="form-control" 
                        value={formData.start_date.toISOString().slice(0, 16)} 
                        onChange={handleChange} 
                        required
                      />
                    </div>

                    <div className="mb-3">
                      <label className="form-label">End Date*</label>
                      <input 
                        type="datetime-local" 
                        name="end_date" 
                        className="form-control" 
                        value={formData.end_date.toISOString().slice(0, 16)} 
                        onChange={handleChange} 
                        required
                      />
                    </div>

                    <div className="form-check form-switch mb-3">
                      <input 
                        type="checkbox" 
                        name="is_featured" 
                        className="form-check-input" 
                        checked={formData.is_featured} 
                        onChange={handleChange} 
                      />
                      <label className="form-check-label">
                        Featured Offer
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Media Upload */}
            <div className="pt-3 mt-3">
              <h2 className="h6 mb-2">Add Photos and Videos</h2>
              <p className="fs-sm mb-0">The maximum photo size is 8 MB. Formats: jpeg, jpg, png. Put the main picture first.</p>
              <p className="fs-sm">The maximum video size is 10 MB. Formats: mp4, mov.</p>
              <div className="border rounded p-3">
                <div className="row row-cols-2 row-cols-sm-3 g-2">
                  {mediaFiles.map((file, index) => (
                    <div className="col" key={index}>
                      <div className="hover-effect-opacity position-relative overflow-hidden rounded">
                        <span className="badge text-bg-light position-absolute top-0 start-0 z-3 mt-2 ms-2">Cover</span>
                        <div className="ratio" style={{ '--fn-aspect-ratio': 'calc(180 / 268 * 100%)' }}>
                          <img src={URL.createObjectURL(file)} alt="Preview" />
                        </div>
                        <div className="hover-effect-target position-absolute top-0 start-0 d-flex align-items-center justify-content-center w-100 h-100 opacity-0">
                          <button 
                            type="button" 
                            className="btn btn-icon btn-sm btn-light position-relative z-2" 
                            aria-label="Remove" 
                            onClick={() => handleRemoveFile(index)}
                          >
                            <i className="fi-trash fs-base"></i>
                          </button>
                          <span className="position-absolute top-0 start-0 w-100 h-100 bg-black bg-opacity-25 z-1"></span>
                        </div>
                      </div>
                    </div>
                  ))}
                  <div className="col">
                    <label className="d-flex align-items-center justify-content-center h-100 cursor-pointer bg-body-tertiary border border-2 border-dotted rounded p-3">
                      <div className="text-center">
                        <i className="fi-plus-circle fs-4 text-secondary-emphasis mb-2"></i>
                        <div className="hover-effect-underline stretched-link fs-sm fw-medium">
                          <input 
                            type="file" 
                            accept="image/*,video/*" 
                            multiple 
                            onChange={handleFileChange} 
                            style={{ display: 'none' }} 
                            id="media-upload"
                          />
                          <label htmlFor="media-upload" className="mb-0">Upload Photos / Videos</label>
                        </div>
                      </div>
                    </label>
                  </div>
                </div>
              </div>
              <div className="pt-4">
                <label htmlFor="link" className="form-label">Link to the Video</label>
                <div className="position-relative">
                  <i className="fi-link position-absolute top-50 start-0 translate-middle-y fs-lg ms-3"></i>
                  <input 
                    type="url" 
                    className="form-control form-control-lg form-icon-start" 
                    id="link" 
                    placeholder="www.youtube.com/..."
                  />
                </div>
              </div>
            </div>

            <div className="d-flex justify-content-end">
              <button 
                type="submit" 
                className="btn btn-primary"
              >
                {offer ? 'Update Offer' : 'Create Offer'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default OfferForm;



